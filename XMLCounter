import org.w3c.dom.Document;
import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException; 
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
//12/6/16
public class xmlReader
  {  public static void main (String argv [])
        {   System.out.println("Yo.,.My bad");
            System.out.println("I voted for Hambre...");
            
            ArrayList<String> names = new ArrayList<String>();
            Map<String,Integer> mpVote = new HashMap<String, Integer>();
            Map<String,String> mpCad = new HashMap<String, String>();
            Map<String,String> mpCadPrty = new HashMap<String, String>();
            
            Map<Integer, String> finalCount = new HashMap<Integer, String>();
            int[] sar;

       try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document xmlFile = docBuilder.parse (new File("vote_Feed.xml"));

            // normalize text representation
            xmlFile.getDocumentElement().normalize();
            // System.out.println ("Root element of the doc is " + xmlFile.getDocumentElement().getNodeName());

            xmlFile.getDocumentElement().normalize();

	          //System.out.println("Root element :" + xmlFile.getDocumentElement().getNodeName());

            NodeList nList = xmlFile.getElementsByTagName("race");

	          System.out.println("----------------------------");

          	for (int temp = 0; temp < nList.getLength(); temp++) {

        	     	Node nNode = nList.item(temp);
 
	        	    //System.out.println("\nCurrent Element :" + nNode.getNodeName());

	      	      if (nNode.getNodeType() == Node.ELEMENT_NODE) {

		        	          Element eElement = (Element) nNode;
                        
                        //System.out.println("writeIn : " + eElement.getElementsByTagName("write_in").item(0).getTextContent());
                        String writeIn = eElement.getElementsByTagName("write_in").item(0).getTextContent();
                       	
                        //System.out.println("Name : " + eElement.getElementsByTagName("name").item(0).getTextContent());
                        String cadName = eElement.getElementsByTagName("name").item(0).getTextContent(); 
                        
                        if(writeIn.equals("yes"))
                           { if (mpCad.containsKey(cadName))
                                { mpVote.put(cadName, (mpVote.get(cadName) +1) ); }
                             else 
                                { mpCad.put(cadName,cadName);
                                  mpVote.put(cadName, 1);
                                  names.add(cadName);}
                            }
                        else
                          {  //System.out.println("id : " + eElement.getElementsByTagName("id").item(0).getTextContent());
                             String cadID = eElement.getElementsByTagName("id").item(0).getTextContent();
                             //System.out.println("party : " + eElement.getElementsByTagName("party").item(0).getTextContent());
                             String party = eElement.getElementsByTagName("party").item(0).getTextContent();
                             
                             if(mpCad.containsKey(cadID))
                               { mpVote.put(cadID, (mpVote.get(cadID) + 1) ); }
                             else
                               { mpCad.put(cadID, cadName);
                                 mpCadPrty.put(cadID, party);
                                 mpVote.put(cadID, 1);
                                 names.add(cadID);}
                           }
		                   }//out of elements
                    }//closes for loop
                  }
             catch (Exception e) { e.printStackTrace();}

                       //I hate netbeans. It doesn't let me type fast.
                       
        sar = new int[mpVote.size()];

        for (int t=0; t<names.size();t++)
             { if(names.get(t).contains("_"))
                { System.out.println("Number of votes for candidate: "+ mpCad.get( names.get(t) ) );
                  System.out.println("Candidate party: "+ mpCadPrty.get(names.get(t)) );
                  System.out.println(mpVote.get(names.get(t)));
                  sar[t]=mpVote.get(names.get(t));
                  finalCount.put(mpVote.get(names.get(t)), mpCad.get(names.get(t)) );
                  System.out.println("\r\n");
                  }
               else{
                  System.out.println("Number of votes for write-in: "+names.get(t));
                  System.out.println(mpVote.get(names.get(t)));
                  sar[t]=mpVote.get(names.get(t));
                  finalCount.put(mpVote.get(names.get(t)), names.get(t) );
                  System.out.println("\r\n");}
               }

        for (int i = 0; i < sar.length - 1; i++)
             { int index = i;
               for (int j = i + 1; j < sar.length; j++)
                   if (sar[j] < sar[index])
                          index = j;

                   int temp = sar[index]; 
                   sar[index] = sar[i];
                   sar[i] = temp;
                }
               /* for(int m=0;m<sar.length;m++)
                  { System.out.print(sar[m] +" "); }*/

          System.out.println("----------------------------");

          System.out.println("\r\nCandidate with the most votes: "+ finalCount.get( sar[sar.length-1] )  );
          System.out.println("Victory with "+ sar[sar.length-1] +" votes.");
          System.out.println("\r\n\nRunner up candidate: "+ finalCount.get( sar[sar.length-2] )  );
          System.out.println("with "+ sar[sar.length-2] +" votes.");
          System.out.println("\r\n\nThird candidate: "+ finalCount.get( sar[sar.length-3] )  );
          System.out.println("with "+ sar[sar.length-3] +" votes.");

          System.out.println("\r\n"+finalCount.get( sar[sar.length-1] ) +" beat "+ finalCount.get( sar[sar.length-2] ) +
                    " by " + (sar[sar.length-1] - sar[sar.length-2]) +" votes.");

    
      }//end of main    
}
